// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @unique(map: "id") @default(uuid())
  username     String
  born         String?
  gender       String?
  phone        String?
  job          String?
  email        String
  password     String
  createdAt    DateTime       @default(now())
  notification Notification[]
  address      Address[]
  cart         Cart[]
}

model Address {
  id              String  @id @unique(map: "id") @default(uuid())
  prov            String
  regency         String
  subdistrict     String
  district        String
  completeAddress String
  user_id         String?
  user            User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id       String    @id @unique(map: "id") @default(uuid())
  name     String
  products Product[]
}

model Product {
  id          String    @id @unique(map: "id") @default(uuid())
  name        String
  price       Int
  img         String
  store       String
  category_id String
  category    Category? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cart        Cart[]
}

model Cart {
  id         String   @id @unique(map: "id") @default(uuid())
  quantity   Int
  product_id String?
  user_id    String?
  product    Product? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Notification {
  id        String   @id @unique(map: "id") @default(uuid())
  message   String
  user_id   String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
